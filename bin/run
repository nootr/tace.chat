#!/bin/bash

set -e

NUM_NODES=1 # Default to 1 node

# Array to store PIDs of background processes
BACKGROUND_PIDS=()

# Function to clean up background processes
cleanup() {
  echo "Stopping nodes..."
  for pid in "${BACKGROUND_PIDS[@]}"; do
    kill "$pid" || true
  done
  pkill -f "target/debug/tace_node" || true # Fallback for any missed tace_node processes
  sleep 1 # Give OS time to release ports
  echo "Cleanup complete."
}

# Trap EXIT signal to ensure cleanup function is called
trap cleanup EXIT

# Function to display usage
usage() {
  echo "Usage: $0 [-n <num_nodes>] [-h] [--clean]"
  echo "  -n <num_nodes>  Number of Chord nodes to spin up (default: 1)"
  echo "  -h              Display this help message"
  echo "  --clean         Remove any running tace_node processes"
  exit 0
}

CLEAN_MODE=false # Initialize clean mode flag

# Parse arguments
while (( "$#" )); do
  case "$1" in
    -n)
      NUM_NODES="$2"
      shift 2
      ;;
    -h)
      usage
      ;;
    --clean)
      CLEAN_MODE=true
      shift
      ;;
    -*)
      echo "Invalid option: $1" >&2
      exit 1
      ;;
    *)
      echo "Unknown argument: $1" >&2
      exit 1
      ;;
  esac
done

if [ "$CLEAN_MODE" = true ]; then
  echo "Removing any running tace_node processes..."
  pkill -f "target/debug/tace_node" || true # Use || true to prevent script from exiting if no processes are found
  pkill -f "python3 -m http.server" || true # Kill web server processes
  echo "Cleanup complete."
  exit 0
fi

# Clean up old log files
rm -f node_*.log



echo "Compiling webclient..."
wasm-pack build webclient

echo "Copying WASM files to public/..."
cp webclient/pkg/tace_webclient.js public/
cp webclient/pkg/tace_webclient_bg.wasm public/

echo "Starting web server in public/ directory..."
(cd public && python3 -m http.server 8000) &
WEB_SERVER_PID=$!
BACKGROUND_PIDS+=($WEB_SERVER_PID)



# Build tace_node once
echo "Building tace_node..."
cargo build --package tace_node

# Start bootstrap node
BOOTSTRAP_PORT=8008
echo "Starting bootstrap node on port $BOOTSTRAP_PORT"
API_PORT="3000" NODE_ADDRESS="127.0.0.1:$BOOTSTRAP_PORT" RUST_BACKTRACE=1 target/debug/tace_node & # Run binary directly
BOOTSTRAP_NODE_PID=$!
BACKGROUND_PIDS+=($BOOTSTRAP_NODE_PID)
sleep 5 # Give bootstrap node more time to start

# Start additional nodes
for (( i=1; i<NUM_NODES; i++ ))
do
    NODE_PORT=$((8008 + i))
    API_PORT=$((3000 + i))
    echo "Starting node on port $NODE_PORT, joining via 127.0.0.1:$BOOTSTRAP_PORT"
    API_PORT="$API_PORT" NODE_ADDRESS="127.0.0.1:$NODE_PORT" BOOTSTRAP_ADDRESS="127.0.0.1:$BOOTSTRAP_PORT" RUST_BACKTRACE=1 target/debug/tace_node &
    NODE_PID=$!
    BACKGROUND_PIDS+=($NODE_PID)
    sleep 1 # Short delay between joining nodes
done

echo "All nodes started. Press Ctrl+C to stop them."

# Keep the script running until Ctrl+C is pressed
while true; do
  sleep 1
done

# The cleanup function will be called automatically on exit
